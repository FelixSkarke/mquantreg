% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mquantreg.R
\name{plot.mquantfit}
\alias{plot.mquantfit}
\title{Plotting M-Quantile Diagnostic Plots}
\usage{
\method{plot}{mquantfit}(
  x,
  plottype = "fit.res",
  add.qvals = FALSE,
  show.huberised = TRUE,
  sqr.res = FALSE,
  kstart = 0.5,
  kend = 3,
  kstep = 0.1,
  coef = FALSE,
  ...
)
}
\arguments{
\item{x}{a mquantfit object, produced by calling the mquantreg-function.}

\item{plottype}{string, which specifies the plot to produce.
#'The avaiable plot types are: \cr
\itemize{
\item \code{"fit.res"} - Fitted vs. Residuals Plot
\item \code{"prop.res"} - Proportion of Residuals Smaller than 0 vs. Fitted Values
\item \code{"fitted.observed"} - Fitted vs. Observerd Values
\item \code{"optk"} - Comparing the Residual Distribution with Normal Distribution
\item \code{"coef.q"} - Coefficients over q
\item \code{"prop.huber.k"} - Proportion of huberised residuals over k
\item \code{"prop.huber.q"} - Proportion of huberised residuals over q
}}

\item{add.qvals}{numeric, containing additional m-quantiles to be shown in plot.}

\item{show.huberised}{boolean controlling if the plot should show the squared residuals instead.}

\item{sqr.res}{boolean controlling if the plot should show the squared residuals instead.}

\item{kstart}{numeric, the first k estimated and shown in the plot.}

\item{kend}{numeric, the last k estimated and shown in the plot.}

\item{kstep}{numeric, controls the steps in which k is increased between kstart and kend.}

\item{coef}{numeric, choose index of coefficient to plot.}

\item{...}{Arguments to be passed to methods, such as graphical parameters.}
}
\value{
a dataframe-object with the qscores of all observations.
}
\description{
The plot-method creates different diagnostic plots for m-quantile regression.
}
\examples{
library(mq1)
df <- simulate_data(n = 1000,
                  real.betas = c(0.1, 0.3, 0.1 ),
                  response.type = "continuous.normal",
                   measurement.error = 0.5)
fit <- mquantreg(formula = "Y ~ x1 + x2",data = df, q  = 0.5, method = "continuous")
plot(fit, plottype = "prop.huber.k", kstart = 0.1, kend = 4)

}
