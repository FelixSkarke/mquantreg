% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mqnb.R
\name{mqnb}
\alias{mqnb}
\title{M-Quantile Estimation for Count Data with Negative Binomial Distribution}
\usage{
mqnb(
  x,
  y,
  q = 0.5,
  k = 1.6,
  maxit = 1000,
  acc = 1e-04,
  offset = NULL,
  case.weights = NULL,
  weights.x = FALSE,
  var.weights = NULL,
  theta.init = 1,
  qgrid = c(0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, seq(from = 0.45, to = 0.55, by =
    0.005), 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9),
  compute.qscores = FALSE
)
}
\arguments{
\item{x}{matrix, containing independent variables}

\item{y}{matrix, containing dependent variables}

\item{q}{number strictly between 0 and 1, which specifies the m-quantile to be estimated.}

\item{k}{a number greater than 0. k is the parameter for the huber psi-function, the default value is 1.6 for standalone use.}

\item{maxit}{an integer, which defines the maximal number of iteration
before the algorithm stops allthough it has not converged yet.
If the maximal number of iteration is reached a warning message will be prompted.}

\item{acc}{defines convergence criteria}

\item{offset}{This can be used to specify an a priori known component to be included in the linear predictor during fitting.
This should be NULL or a numeric vector of length equal to the number of cases.}

\item{case.weights}{vector of observation weights;
if supplied, the algorithm fits to minimize the sum of the weights multiplied into the absolute residuals.
The length of weights must be the same as the number of observations.
The weights must be nonnegative and it is strongly recommended that they be strictly positive, since zero weights are ambiguous.}

\item{weights.x}{vector of weights, for estimation of robust glm to obtain initial weights in the discrete algorithms.}

\item{var.weights}{dataframe, if supplied the residuals are scaled.}

\item{theta.init}{numeric, initial theta.}

\item{qgrid}{vector of quantiles, which are to be used for qscore calculations.}

\item{compute.qscores}{boolean, controls if q-scores are estimated.}
}
\value{
See \code{\link{mquantreg}} for details.
\code{summary()}, \code{print()}, \code{fit()} and \code{predict()}-methods are avaiable.
}
\description{
The function implements m-quantile estimation for count data as proposed by Chambers et al.(2014).
The algorithm is based on robust quasi-likelihood estimation by Cantoni & Ronchetti (2001).
The function is called by the mquantreg-function,
when the method "nb" is selected. Important: Standalone use is possible, but not advised.
}
\examples{
library(mq1)

df <- simulate_data(n = 100,
                  real.betas = c(0.1, 0.3, 0.1 ),
                  response.type = "count.nb",
                   measurement.error = 0.5)

fit <- mquantreg(formula = Y ~ x1 + x2, data = df, q  = 0.5, method = "nb")
print(fit)
}
\references{
Cantoni, E., & Ronchetti, E. (2001). Robust inference for generalized linear models. Journal of the American Statistical Association, 96(455), 1022-1030.
Chambers, R., Dreassi, E., & Salvati, N. (2014). Disease mapping via negative binomial regression M‐quantiles. Statistics in medicine, 33(27), 4805-4824.
}
